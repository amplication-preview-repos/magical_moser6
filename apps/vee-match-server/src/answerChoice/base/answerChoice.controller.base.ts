/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AnswerChoiceService } from "../answerChoice.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AnswerChoiceCreateInput } from "./AnswerChoiceCreateInput";
import { AnswerChoice } from "./AnswerChoice";
import { AnswerChoiceFindManyArgs } from "./AnswerChoiceFindManyArgs";
import { AnswerChoiceWhereUniqueInput } from "./AnswerChoiceWhereUniqueInput";
import { AnswerChoiceUpdateInput } from "./AnswerChoiceUpdateInput";
import { UserAnswerFindManyArgs } from "../../userAnswer/base/UserAnswerFindManyArgs";
import { UserAnswer } from "../../userAnswer/base/UserAnswer";
import { UserAnswerWhereUniqueInput } from "../../userAnswer/base/UserAnswerWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AnswerChoiceControllerBase {
  constructor(
    protected readonly service: AnswerChoiceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AnswerChoice })
  @nestAccessControl.UseRoles({
    resource: "AnswerChoice",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAnswerChoice(
    @common.Body() data: AnswerChoiceCreateInput
  ): Promise<AnswerChoice> {
    return await this.service.createAnswerChoice({
      data: {
        ...data,

        question: data.question
          ? {
              connect: data.question,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        question: {
          select: {
            id: true,
          },
        },

        text: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AnswerChoice] })
  @ApiNestedQuery(AnswerChoiceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AnswerChoice",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async answerChoices(@common.Req() request: Request): Promise<AnswerChoice[]> {
    const args = plainToClass(AnswerChoiceFindManyArgs, request.query);
    return this.service.answerChoices({
      ...args,
      select: {
        createdAt: true,
        id: true,

        question: {
          select: {
            id: true,
          },
        },

        text: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AnswerChoice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AnswerChoice",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async answerChoice(
    @common.Param() params: AnswerChoiceWhereUniqueInput
  ): Promise<AnswerChoice | null> {
    const result = await this.service.answerChoice({
      where: params,
      select: {
        createdAt: true,
        id: true,

        question: {
          select: {
            id: true,
          },
        },

        text: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AnswerChoice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AnswerChoice",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAnswerChoice(
    @common.Param() params: AnswerChoiceWhereUniqueInput,
    @common.Body() data: AnswerChoiceUpdateInput
  ): Promise<AnswerChoice | null> {
    try {
      return await this.service.updateAnswerChoice({
        where: params,
        data: {
          ...data,

          question: data.question
            ? {
                connect: data.question,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          question: {
            select: {
              id: true,
            },
          },

          text: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AnswerChoice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AnswerChoice",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAnswerChoice(
    @common.Param() params: AnswerChoiceWhereUniqueInput
  ): Promise<AnswerChoice | null> {
    try {
      return await this.service.deleteAnswerChoice({
        where: params,
        select: {
          createdAt: true,
          id: true,

          question: {
            select: {
              id: true,
            },
          },

          text: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/userAnswers")
  @ApiNestedQuery(UserAnswerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserAnswer",
    action: "read",
    possession: "any",
  })
  async findUserAnswers(
    @common.Req() request: Request,
    @common.Param() params: AnswerChoiceWhereUniqueInput
  ): Promise<UserAnswer[]> {
    const query = plainToClass(UserAnswerFindManyArgs, request.query);
    const results = await this.service.findUserAnswers(params.id, {
      ...query,
      select: {
        answerChoice: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        question: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userAnswers")
  @nestAccessControl.UseRoles({
    resource: "AnswerChoice",
    action: "update",
    possession: "any",
  })
  async connectUserAnswers(
    @common.Param() params: AnswerChoiceWhereUniqueInput,
    @common.Body() body: UserAnswerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAnswers: {
        connect: body,
      },
    };
    await this.service.updateAnswerChoice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userAnswers")
  @nestAccessControl.UseRoles({
    resource: "AnswerChoice",
    action: "update",
    possession: "any",
  })
  async updateUserAnswers(
    @common.Param() params: AnswerChoiceWhereUniqueInput,
    @common.Body() body: UserAnswerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAnswers: {
        set: body,
      },
    };
    await this.service.updateAnswerChoice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userAnswers")
  @nestAccessControl.UseRoles({
    resource: "AnswerChoice",
    action: "update",
    possession: "any",
  })
  async disconnectUserAnswers(
    @common.Param() params: AnswerChoiceWhereUniqueInput,
    @common.Body() body: UserAnswerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAnswers: {
        disconnect: body,
      },
    };
    await this.service.updateAnswerChoice({
      where: params,
      data,
      select: { id: true },
    });
  }
}
