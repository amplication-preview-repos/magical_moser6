/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AnswerChoice as PrismaAnswerChoice,
  UserAnswer as PrismaUserAnswer,
  Question as PrismaQuestion,
} from "@prisma/client";

export class AnswerChoiceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AnswerChoiceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.answerChoice.count(args);
  }

  async answerChoices(
    args: Prisma.AnswerChoiceFindManyArgs
  ): Promise<PrismaAnswerChoice[]> {
    return this.prisma.answerChoice.findMany(args);
  }
  async answerChoice(
    args: Prisma.AnswerChoiceFindUniqueArgs
  ): Promise<PrismaAnswerChoice | null> {
    return this.prisma.answerChoice.findUnique(args);
  }
  async createAnswerChoice(
    args: Prisma.AnswerChoiceCreateArgs
  ): Promise<PrismaAnswerChoice> {
    return this.prisma.answerChoice.create(args);
  }
  async updateAnswerChoice(
    args: Prisma.AnswerChoiceUpdateArgs
  ): Promise<PrismaAnswerChoice> {
    return this.prisma.answerChoice.update(args);
  }
  async deleteAnswerChoice(
    args: Prisma.AnswerChoiceDeleteArgs
  ): Promise<PrismaAnswerChoice> {
    return this.prisma.answerChoice.delete(args);
  }

  async findUserAnswers(
    parentId: string,
    args: Prisma.UserAnswerFindManyArgs
  ): Promise<PrismaUserAnswer[]> {
    return this.prisma.answerChoice
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userAnswers(args);
  }

  async getQuestion(parentId: string): Promise<PrismaQuestion | null> {
    return this.prisma.answerChoice
      .findUnique({
        where: { id: parentId },
      })
      .question();
  }
}
