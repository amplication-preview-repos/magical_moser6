/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserAnswer } from "./UserAnswer";
import { UserAnswerCountArgs } from "./UserAnswerCountArgs";
import { UserAnswerFindManyArgs } from "./UserAnswerFindManyArgs";
import { UserAnswerFindUniqueArgs } from "./UserAnswerFindUniqueArgs";
import { CreateUserAnswerArgs } from "./CreateUserAnswerArgs";
import { UpdateUserAnswerArgs } from "./UpdateUserAnswerArgs";
import { DeleteUserAnswerArgs } from "./DeleteUserAnswerArgs";
import { AnswerChoice } from "../../answerChoice/base/AnswerChoice";
import { Question } from "../../question/base/Question";
import { User } from "../../user/base/User";
import { UserAnswerService } from "../userAnswer.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserAnswer)
export class UserAnswerResolverBase {
  constructor(
    protected readonly service: UserAnswerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserAnswer",
    action: "read",
    possession: "any",
  })
  async _userAnswersMeta(
    @graphql.Args() args: UserAnswerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserAnswer])
  @nestAccessControl.UseRoles({
    resource: "UserAnswer",
    action: "read",
    possession: "any",
  })
  async userAnswers(
    @graphql.Args() args: UserAnswerFindManyArgs
  ): Promise<UserAnswer[]> {
    return this.service.userAnswers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserAnswer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserAnswer",
    action: "read",
    possession: "own",
  })
  async userAnswer(
    @graphql.Args() args: UserAnswerFindUniqueArgs
  ): Promise<UserAnswer | null> {
    const result = await this.service.userAnswer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserAnswer)
  @nestAccessControl.UseRoles({
    resource: "UserAnswer",
    action: "create",
    possession: "any",
  })
  async createUserAnswer(
    @graphql.Args() args: CreateUserAnswerArgs
  ): Promise<UserAnswer> {
    return await this.service.createUserAnswer({
      ...args,
      data: {
        ...args.data,

        answerChoice: args.data.answerChoice
          ? {
              connect: args.data.answerChoice,
            }
          : undefined,

        question: args.data.question
          ? {
              connect: args.data.question,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserAnswer)
  @nestAccessControl.UseRoles({
    resource: "UserAnswer",
    action: "update",
    possession: "any",
  })
  async updateUserAnswer(
    @graphql.Args() args: UpdateUserAnswerArgs
  ): Promise<UserAnswer | null> {
    try {
      return await this.service.updateUserAnswer({
        ...args,
        data: {
          ...args.data,

          answerChoice: args.data.answerChoice
            ? {
                connect: args.data.answerChoice,
              }
            : undefined,

          question: args.data.question
            ? {
                connect: args.data.question,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserAnswer)
  @nestAccessControl.UseRoles({
    resource: "UserAnswer",
    action: "delete",
    possession: "any",
  })
  async deleteUserAnswer(
    @graphql.Args() args: DeleteUserAnswerArgs
  ): Promise<UserAnswer | null> {
    try {
      return await this.service.deleteUserAnswer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AnswerChoice, {
    nullable: true,
    name: "answerChoice",
  })
  @nestAccessControl.UseRoles({
    resource: "AnswerChoice",
    action: "read",
    possession: "any",
  })
  async getAnswerChoice(
    @graphql.Parent() parent: UserAnswer
  ): Promise<AnswerChoice | null> {
    const result = await this.service.getAnswerChoice(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Question, {
    nullable: true,
    name: "question",
  })
  @nestAccessControl.UseRoles({
    resource: "Question",
    action: "read",
    possession: "any",
  })
  async getQuestion(
    @graphql.Parent() parent: UserAnswer
  ): Promise<Question | null> {
    const result = await this.service.getQuestion(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: UserAnswer): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
